cmake_minimum_required(VERSION 3.23)
project(Metaballs LANGUAGES CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE) # generate a compile.command.json file to use for clangd, bot generated by MSVC
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_VERBOSE_MAKEFILE TRUE)

# bulding the executable and adding the source files
# To add all the source files autmatically (Not recommended by Cmake)
# file(GLOB_RECURSE SOURCES_CPP CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
# file(GLOB_RECURSE SOURCES_HPP CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp")
# add_executable(${PROJECT_NAME} ${SOURCES_CPP} ${SOURCES_HPP})
if(WIN32)
    add_executable(${PROJECT_NAME} WIN32 src/main.cpp)
else()
    add_executable(${PROJECT_NAME} src/main.cpp)
endif()

add_subdirectory(src)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)

# adding dependencies
include(FetchContent)
option(BUILD_SHARED_LIBS FALSE)
set(FETCHCONTENT_UPDATES_DISCONNECTED TRUE) # Supposed to avoid fetchContent from checking for updates everyTime
set(FETCHCONTENT_TRY_FIND_PACKAGE_MODE ALWAYS) # Supposed to make fetchContent use find_package if available
FetchContent_Declare(
    SFML
    GIT_REPOSITORY https://github.com/SFML/SFML.git
    GIT_TAG 69ea0cd863aed1d4092b970b676924a716ff718b # 2.6.1
)
set(SFML_BUILD_AUDIO FALSE)
set(SFML_BUILD_NETWORK FALSE)
set(SFML_BUILD_EXAMPLES FALSE)
FetchContent_Declare(
    TGUI
    GIT_REPOSITORY https://github.com/texus/TGUI.git
    GIT_TAG 9fe2d5d408627965beda66e0a042ae1f0d86268d # v1.2.0
)
set(TGUI_BACKEND SFML_GRAPHICS)
set(TGUI_BUILD_EXAMPLES FALSE)
set(TGUI_BUILD_GUI_BUILDER FALSE)
FetchContent_MakeAvailable(SFML TGUI)
target_link_libraries(${PROJECT_NAME} PRIVATE TGUI::TGUI sfml-graphics) # TGUI needs to be linked before SFML

if(WIN32) # to remove console windows when laucching on Windows
    target_link_libraries(${PROJECT_NAME} PRIVATE sfml-main)
endif()

if(WIN32)
    if(SFML_BUILD_AUDIO)
        add_custom_command(
            TARGET ${PROJECT_NAME}
            COMMENT "Copy OpenAL DLL"
            PRE_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SFML_SOURCE_DIR}/extlibs/bin/$<IF:$<EQUAL:${CMAKE_SIZEOF_VOID_P},8>,x64,x86>/openal32.dll $<TARGET_FILE_DIR:${PROJECT_NAME}>
            VERBATIM)
    endif()
endif()

install(DIRECTORY src/assets TYPE BIN)
install(TARGETS ${PROJECT_NAME})

# adding warning flags
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /permissive-) # /WX
elseif(CMAKE_CXX_COMPILER_ID MATCHES "(GNU|Clang)")
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic -Wshadow -Wconversion -Wsign-conversion -Wold-style-cast)
endif()

include(InstallRequiredSystemLibraries)
include(CPack)

include(CMakePrintHelpers)
cmake_print_properties(TARGETS sfml-graphics TGUI::TGUI PROPERTIES TYPE SOURCE_DIR CXX_STANDARD)

# TODO use ccache
# TODO use shared lib in debug for faster compile
# TODO use findpackage for SFML and TGUI to try to find them before calling populate
